{"is_source_file": true, "format": "Python", "description": "This file manages a FAISS index for embedding vectors associated with document chunks, providing functionalities for building, updating, and querying the index, and handling persistence on disk.", "external_files": ["faiss", "numpy", "django.db", "../models", ".config"], "external_methods": ["faiss.read_index", "faiss.write_index", "faiss.IndexFlatIP"], "published": ["get_faiss_index", "ensure_index_in_sync", "upsert_chunk_embedding"], "classes": [{"name": "FaissIndex", "description": "Class managing a FAISS index for similarity search over chunk embeddings."}], "methods": [{"name": "__init__(self, dim: int, index_path: str, map_path: Optional[str] = None)", "description": "Initializes FAISS index manager with dimension, index path, and optional map path.", "scope": "FaissIndex", "scopeKind": "class"}, {"name": "_create_index(self)", "description": "Creates a new FAISS index using IndexFlatIP for cosine similarity.", "scope": "FaissIndex", "scopeKind": "class"}, {"name": "_load_or_create(self)", "description": "Loads existing index and ID map from disk or creates a new index.", "scope": "FaissIndex", "scopeKind": "class"}, {"name": "_persist(self)", "description": "Saves the current index and ID map to disk.", "scope": "FaissIndex", "scopeKind": "class"}, {"name": "np.ndarray _normalize(self, vecs: np.ndarray)", "description": "Normalizes vectors to unit length for cosine similarity purposes.", "scope": "FaissIndex", "scopeKind": "class"}, {"name": "rebuild_from_db(self)", "description": "Rebuilds the FAISS index from Embedding database records.", "scope": "FaissIndex", "scopeKind": "class"}, {"name": "add_embeddings(self, chunk_ids: List[int], vectors: List[List[float]])", "description": "Adds new vectors and updates the ID map in the FAISS index.", "scope": "FaissIndex", "scopeKind": "class"}, {"name": "List[Tuple[int,float]] search(self, query_vector: List[float], top_k: int = 5)", "description": "Performs similarity search with a query vector, returning top_k chunk IDs with scores.", "scope": "FaissIndex", "scopeKind": "class"}, {"name": "ensure_index_in_sync()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "FaissIndex get_faiss_index()", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "upsert_chunk_embedding(chunk: DocumentChunk, vector: List[float], model: str, dim: int)", "scope": "", "scopeKind": "", "description": "unavailable"}], "calls": ["faiss.read_index", "faiss.write_index", "np.linalg.norm", "Embedding.objects.all", "json.load", "json.dump", "os.path.exists"], "search-terms": ["FAISS index manager", "chunk embeddings", "vector normalization", "index persistence", "rebuild index from db", "embedding search", "faiss singleton"], "state": 2, "file_id": 22, "knowledge_revision": 46, "git_revision": "", "ctags": [{"_type": "tag", "name": "FaissIndex", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^class FaissIndex:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^    def __init__(self, dim: int, index_path: str, map_path: Optional[str] = None):$/", "language": "Python", "kind": "member", "signature": "(self, dim: int, index_path: str, map_path: Optional[str] = None)", "scope": "FaissIndex", "scopeKind": "class"}, {"_type": "tag", "name": "_create_index", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^    def _create_index(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "FaissIndex", "scopeKind": "class"}, {"_type": "tag", "name": "_faiss_instance", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^_faiss_instance: Optional[FaissIndex] = None$/", "language": "Python", "typeref": "typename:Optional[FaissIndex]", "kind": "variable"}, {"_type": "tag", "name": "_load_or_create", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^    def _load_or_create(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "FaissIndex", "scopeKind": "class"}, {"_type": "tag", "name": "_normalize", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^    def _normalize(self, vecs: np.ndarray) -> np.ndarray:$/", "language": "Python", "typeref": "typename:np.ndarray", "kind": "member", "signature": "(self, vecs: np.ndarray)", "scope": "FaissIndex", "scopeKind": "class"}, {"_type": "tag", "name": "_persist", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^    def _persist(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "FaissIndex", "scopeKind": "class"}, {"_type": "tag", "name": "add_embeddings", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^    def add_embeddings(self, chunk_ids: List[int], vectors: List[List[float]]):$/", "language": "Python", "kind": "member", "signature": "(self, chunk_ids: List[int], vectors: List[List[float]])", "scope": "FaissIndex", "scopeKind": "class"}, {"_type": "tag", "name": "ensure_index_in_sync", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^def ensure_index_in_sync():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "get_faiss_index", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^def get_faiss_index() -> FaissIndex:$/", "language": "Python", "typeref": "typename:FaissIndex", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "np", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^import numpy as np  # type: ignore$/", "language": "Python", "kind": "namespace", "nameref": "module:numpy"}, {"_type": "tag", "name": "rebuild_from_db", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^    def rebuild_from_db(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "FaissIndex", "scopeKind": "class"}, {"_type": "tag", "name": "search", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^    def search(self, query_vector: List[float], top_k: int = 5) -> List[Tuple[int, float]]:$/", "language": "Python", "typeref": "typename:List[Tuple[int,float]]", "kind": "member", "signature": "(self, query_vector: List[float], top_k: int = 5)", "scope": "FaissIndex", "scopeKind": "class"}, {"_type": "tag", "name": "upsert_chunk_embedding", "path": "/home/kavia/workspace/code-generation/company-data-qa-platform-2984-2993/qanda_backend/api/services/faiss_index.py", "pattern": "/^def upsert_chunk_embedding(chunk: DocumentChunk, vector: List[float], model: str, dim: int):$/", "language": "Python", "kind": "function", "signature": "(chunk: DocumentChunk, vector: List[float], model: str, dim: int)"}], "hash": "7f77ad6a02b4348deace829c59be89d0", "format-version": 4, "code-base-name": "qanda_backend", "filename": "qanda_backend/api/services/faiss_index.py", "fields": [{"name": "Optional[FaissIndex] _faiss_instance", "scope": "", "scopeKind": "", "description": "unavailable"}], "revision_history": [{"46": ""}]}